{
  "_args": [
    [
      {
        "raw": "minipass-collect@^1.0.2",
        "scope": null,
        "escapedName": "minipass-collect",
        "name": "minipass-collect",
        "rawSpec": "^1.0.2",
        "spec": ">=1.0.2 <2.0.0",
        "type": "range"
      },
      "/Users/ants/Documents/前端学习/开课吧第16期全栈/vue-study-cyy/ssr/node_modules/@vue/cli-service/node_modules/cacache"
    ]
  ],
  "_cnpm_publish_time": 1569877028179,
  "_from": "minipass-collect@^1.0.2",
  "_hasShrinkwrap": false,
  "_id": "minipass-collect@1.0.2",
  "_location": "/minipass-collect",
  "_nodeVersion": "12.8.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/minipass-collect_1.0.2_1569877028029_0.9003110762470692"
  },
  "_npmUser": {
    "name": "isaacs",
    "email": "i@izs.me"
  },
  "_npmVersion": "6.12.0-next.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "minipass-collect@^1.0.2",
    "scope": null,
    "escapedName": "minipass-collect",
    "name": "minipass-collect",
    "rawSpec": "^1.0.2",
    "spec": ">=1.0.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@vue/cli-service/cacache"
  ],
  "_resolved": "https://registry.npm.taobao.org/minipass-collect/download/minipass-collect-1.0.2.tgz",
  "_shasum": "22b813bf745dc6edba2576b940022ad6edc8c617",
  "_shrinkwrap": null,
  "_spec": "minipass-collect@^1.0.2",
  "_where": "/Users/ants/Documents/前端学习/开课吧第16期全栈/vue-study-cyy/ssr/node_modules/@vue/cli-service/node_modules/cacache",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "https://izs.me"
  },
  "dependencies": {
    "minipass": "^3.0.0"
  },
  "description": "A Minipass stream that collects all the data into a single chunk",
  "devDependencies": {
    "tap": "^14.6.9"
  },
  "directories": {},
  "dist": {
    "shasum": "22b813bf745dc6edba2576b940022ad6edc8c617",
    "size": 2057,
    "noattachment": false,
    "tarball": "https://registry.npm.taobao.org/minipass-collect/download/minipass-collect-1.0.2.tgz"
  },
  "engines": {
    "node": ">= 8"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "95c7358c4b4f940568f209dd408730a6943ecb8e",
  "license": "ISC",
  "maintainers": [
    {
      "name": "isaacs",
      "email": "i@izs.me"
    }
  ],
  "name": "minipass-collect",
  "optionalDependencies": {},
  "publish_time": 1569877028179,
  "readme": "# minipass-collect\n\nA Minipass stream that collects all the data into a single chunk\n\nNote that this buffers ALL data written to it, so it's only good for\nsituations where you are sure the entire stream fits in memory.\n\nNote: this is primarily useful for the `Collect.PassThrough` class, since\nMinipass streams already have a `.collect()` method which returns a promise\nthat resolves to the array of chunks, and a `.concat()` method that returns\nthe data concatenated into a single Buffer or String.\n\n## USAGE\n\n```js\nconst Collect = require('minipass-collect')\n\nconst collector = new Collect()\ncollector.on('data', allTheData => {\n  console.log('all the data!', allTheData)\n})\n\nsomeSourceOfData.pipe(collector)\n\n// note that you can also simply do:\nsomeSourceOfData.pipe(new Minipass()).concat().then(data => ...)\n// or even, if someSourceOfData is a Minipass:\nsomeSourceOfData.concat().then(data => ...)\n// but you might prefer to have it stream-shaped rather than\n// Promise-shaped in some scenarios.\n```\n\nIf you want to collect the data, but _also_ act as a passthrough stream,\nthen use `Collect.PassThrough` instead (for example to memoize streaming\nresponses), and listen on the `collect` event.\n\n```js\nconst Collect = require('minipass-collect')\n\nconst collector = new Collect.PassThrough()\ncollector.on('collect', allTheData => {\n  console.log('all the data!', allTheData)\n})\n\nsomeSourceOfData.pipe(collector).pipe(someOtherStream)\n```\n\nAll [minipass options](http://npm.im/minipass) are supported.\n",
  "readmeFilename": "README.md",
  "scripts": {
    "postpublish": "git push origin --follow-tags",
    "postversion": "npm publish",
    "preversion": "npm test",
    "snap": "tap",
    "test": "tap"
  },
  "tap": {
    "check-coverage": true
  },
  "version": "1.0.2"
}
