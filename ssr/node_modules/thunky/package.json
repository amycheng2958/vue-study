{
  "_args": [
    [
      {
        "raw": "thunky@^1.0.2",
        "scope": null,
        "escapedName": "thunky",
        "name": "thunky",
        "rawSpec": "^1.0.2",
        "spec": ">=1.0.2 <2.0.0",
        "type": "range"
      },
      "/Users/ants/Documents/前端学习/开课吧第16期全栈/vue-study-cyy/ssr/node_modules/multicast-dns"
    ]
  ],
  "_cnpm_publish_time": 1571043270361,
  "_from": "thunky@^1.0.2",
  "_hasShrinkwrap": false,
  "_id": "thunky@1.1.0",
  "_location": "/thunky",
  "_nodeVersion": "10.16.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/thunky_1.1.0_1571043270184_0.776382449698759"
  },
  "_npmUser": {
    "name": "mafintosh",
    "email": "mathiasbuus@gmail.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "thunky@^1.0.2",
    "scope": null,
    "escapedName": "thunky",
    "name": "thunky",
    "rawSpec": "^1.0.2",
    "spec": ">=1.0.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/multicast-dns"
  ],
  "_resolved": "https://registry.npm.taobao.org/thunky/download/thunky-1.1.0.tgz",
  "_shasum": "5abaf714a9405db0504732bbccd2cedd9ef9537d",
  "_shrinkwrap": null,
  "_spec": "thunky@^1.0.2",
  "_where": "/Users/ants/Documents/前端学习/开课吧第16期全栈/vue-study-cyy/ssr/node_modules/multicast-dns",
  "author": {
    "name": "Mathias Buus Madsen",
    "email": "mathiasbuus@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/thunky/issues"
  },
  "dependencies": {},
  "description": "delay the evaluation of a paramless async function and cache the result",
  "devDependencies": {
    "standard": "^12.0.1",
    "tape": "^4.9.1"
  },
  "directories": {},
  "dist": {
    "shasum": "5abaf714a9405db0504732bbccd2cedd9ef9537d",
    "size": 3117,
    "noattachment": false,
    "tarball": "https://registry.npm.taobao.org/thunky/download/thunky-1.1.0.tgz"
  },
  "gitHead": "4f24392fd09949e3785598d99b087e8256599989",
  "homepage": "https://github.com/mafintosh/thunky#readme",
  "keywords": [
    "memo",
    "thunk",
    "async",
    "lazy",
    "control",
    "flow",
    "cache"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "feross",
      "email": "feross@feross.org"
    },
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    }
  ],
  "name": "thunky",
  "optionalDependencies": {},
  "publish_time": 1571043270361,
  "readme": "# thunky\n\nDelay the evaluation of a paramless async function and cache the result (see [thunk](http://en.wikipedia.org/wiki/Thunk_%28functional_programming%29)).\n\n```\nnpm install thunky\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/thunky.svg?style=flat)](http://travis-ci.org/mafintosh/thunky)\n\n## Example\n\nLet's make a simple function that returns a random number 1 second after it is called for the first time\n\n``` js\nvar thunky = require('thunky')\n\nvar test = thunky(function (callback) { // the inner function should only accept a callback\n  console.log('waiting 1s and returning random number')\n  setTimeout(function () {\n    callback(Math.random())\n  }, 1000)\n})\n\ntest(function (num) {  // inner function is called the first time we call test\n  console.log(num) // prints random number\n})\n\ntest(function (num) {  // subsequent calls waits for the first call to finish and return the same value\n  console.log(num) // prints the same random number as above\n})\n```\n\n## Lazy evaluation\n\nThunky makes it easy to implement a lazy evaluation pattern.\n\n``` js\nvar getDb = thunky(function (callback) {\n  db.open(myConnectionString, callback)\n})\n\nvar queryDb = function (query, callback) {\n  getDb(function (err, db) {\n    if (err) return callback(err)\n    db.query(query, callback)\n  })\n}\n\nqueryDb('some query', function (err, result) { ... } )\n\nqueryDb('some other query', function (err, result) { ... } )\n```\n\nThe first time `getDb` is called it will try do open a connection to the database.\nAny subsequent calls will just wait for the first call to complete and then call your callback.\n\nA nice property of this pattern is that it *easily* allows us to pass any error caused by `getDb` to the `queryDb` callback.\n\n## Error → No caching\n\nIf the thunk callback is called with an `Error` object as the first argument it will not cache the result\n\n``` js\nvar fails = thunky(function (callback) {\n  console.log('returning an error')\n  callback(new Error('bad stuff'))\n})\n\nfails(function (err) { // inner function is called\n  console.log(err)\n});\n\nfails(function (err) { // inner function is called again as it returned an error before\n  console.log(err)\n})\n```\n\n## Promise version\n\nA promise version is available as well\n\n``` js\nvar thunkyp = require('thunky/promise')\n\nvar ready = thunkyp(async function () {\n  // ... do async stuff\n  return 42\n})\n\n// same semantics as the callback version\nawait ready()\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/thunky.git"
  },
  "scripts": {
    "test": "standard && tape test.js"
  },
  "version": "1.1.0"
}
